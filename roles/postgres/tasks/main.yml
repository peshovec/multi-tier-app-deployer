---

- name: Disable any postgres module repos
  command: dnf -qy module disable postgresql

- name: Install postgres packages
  dnf:
    name: "{{ __package }}"
    state: present
    enablerepo:
      - pgdg12
    disable_gpg_check: true
  loop: 
    - "{{ postgres_rhel8_repo }}"        
    - "{{ postgres_packages }}"
  loop_control:
    loop_var: __package

- name: Check if postgres initialized
  stat:
    path: "{{ postgres_12_data_dir }}/PG_VERSION"
  register: r_postgres_init_dir_state

- name: Run postgres initdb to initialize if postgres not initialized
  when: not r_postgres_init_dir_state.stat.exists
  command: "{{ postgres_12_bin_path }}/postgresql-12-setup initdb"
  notify: restart_postgres

- name: Setup postgres for remote password auth
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_12_data_dir }}/pg_hba.conf"
  notify: restart_postgres

- name: Setup postgres to listen on network interfaces
  lineinfile:
    dest: "{{ postgres_12_data_dir }}/postgresql.conf"
    line: "listen_addresses = '*'"
    insertafter: "#listen_addresses"
  notify: restart_postgres

- name: Setup postgres as started and enabled on boot.
  service:
    name: "{{ postgres_service }}"
    state: "{{ postgres_service_state | default('started') }}"
    enabled: "{{ postgres_service_enabled | default(true) }}"

- name: Configure postgres resources, user, database etc 
  block:

    - name: Setup postgres database(s) 
      community.postgresql.postgresql_db:
        name: "{{ __database.name }}"
        state: "{{ __database.state | default('present') }}"
      loop: "{{ postgres_databases }}"
      loop_control:
        loop_var: __database

    - name: Create postgres user#(s) 
      community.postgresql.postgresql_user:
        name: "{{ __user.name }}"
        password: "{{ __user.password | default(omit) }}"
        encrypted: true # "{{ __user.encrypted | default(omit) }}"
        priv: "{{ __user.priv | default(omit) }}"
        db: "{{ __user.database | default(omit) }}"
        # role_attr_flags: "{{ __user.role_attr_flags | default(omit) }}"
        state: "{{ __user.state | default('present') }}"
      loop: "{{ postgres_users }}"
      loop_control:
        loop_var: __user
      no_log: "{{ postgres_user_no_log_state | default(false) }}" 

  become_user: "{{ postgres_user }}"

